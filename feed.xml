<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://bran-nie.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://bran-nie.com/" rel="alternate" type="text/html" /><updated>2021-03-24T18:22:35+08:00</updated><id>https://bran-nie.com/feed.xml</id><title type="html">鹏程</title><subtitle>description</subtitle><author><name>Bran.nie</name></author><entry><title type="html">博客由 username.github.io 转为自定义域名</title><link href="https://bran-nie.com/2021/03/23/domain-name/" rel="alternate" type="text/html" title="博客由 username.github.io 转为自定义域名" /><published>2021-03-23T00:00:00+08:00</published><updated>2021-03-23T00:00:00+08:00</updated><id>https://bran-nie.com/2021/03/23/domain-name</id><content type="html" xml:base="https://bran-nie.com/2021/03/23/domain-name/">&lt;blockquote&gt;
  &lt;p&gt;发现在国内，username.github.io 不能解析，了解一下是运营商的 DNS 问题。科学上网和通过本地修改 DNS 可以解决，但这只是针对个人，对其他人一点也不友好。而自定义域名可以完美的解决这个问题，再者，GitHub Page 也是很完美的支持自定义域名。&lt;/p&gt;

  &lt;p&gt;故今早打算购买一个域名用作博客，HTTPS 也是要考虑的。看了一些服务商，最后选择了腾讯云，花半个小时左右完美的解决需求。&lt;strong&gt;且为了培养写博客的习惯，便记录一下这个流程，也供同道中人参考使用。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- ![](/images/blog/inaccessible.png) --&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/inaccessible.png&quot; height=&quot;360&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;购买域名&quot;&gt;购买域名&lt;/h2&gt;

&lt;p&gt;域名注册服务商有不少，你可以依据自己喜爱选择一个即可。我是今天看到 &lt;a href=&quot;https://www.dnspod.cn/promo/domainscarnival?promo_code=G2LSXI22380&amp;amp;source=sharelink&amp;amp;from=link&quot; target=&quot;_blank&quot;&gt;腾讯云的复工大促活动&lt;/a&gt; ，再加上之前一些云服务也是用的他们的，所以就选择了这个服务商。&lt;/p&gt;

&lt;p&gt;至于其他的域名服务商，也都大同小异，这里说几个熟悉的平台：&lt;a href=&quot;https://sg.godaddy.com/&quot; target=&quot;_blank&quot;&gt;Godaddy&lt;/a&gt;，&lt;a href=&quot;https://wanwang.aliyun.com/domain/&quot; target=&quot;_blank&quot;&gt;阿里云&lt;/a&gt;，&lt;a href=&quot;https://dnspod.cloud.tencent.com/&quot; target=&quot;_blank&quot;&gt;腾讯云&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;选好平台后，如何购买域名。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首先是要查询你想要注册的域名，是否还在。不在的话就换吧，换名字或者一级域名(即后缀如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cn&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xyz&lt;/code&gt;)。&lt;/li&gt;
  &lt;li&gt;域名选好后，加到购物车进行支付购买即可。&lt;/li&gt;
  &lt;li&gt;备注：国内的服务商，要填好个人的信息，需要实名认证的。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;域名解析&quot;&gt;域名解析&lt;/h2&gt;

&lt;p&gt;在购买好域名之后，我们就可以进到域名服务商提供的域名管理页面。这一步就是用来解析域名，通俗点讲，就是要让网络知道这个域名指向哪里，因为域名本质上只是一个名字。你叫张三，他叫李四，张三与李四只是两个人的名字。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;打开域名的管理页面，找到解析这个功能，(找不到的可以自行查询 &lt;a href=&quot;https://cn.bing.com&quot; target=&quot;_blank&quot;&gt;Bing 搜索&lt;/a&gt;)，下面展示的均为腾讯云(没广告费哎)。
&lt;img src=&quot;/images/blog/domain_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;添加记录，两条 A 记录和一个 CNAME 记录即可。可以仿照图片添加，&lt;strong&gt;需要替换的是 CNAME 那里的记录值，换成你的 GitHub page 地址。&lt;/strong&gt;
&lt;img src=&quot;/images/blog/domain_2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;这里简单说一下两个 A 记录是什么，这两个 A 记录指向的是 GitHub Page 的 IP 地址，&lt;img src=&quot;/images/blog/domain_3.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;另外，关于 GitHub Page 自定义域名，&lt;a href=&quot;https://docs.github.com/cn/github/working-with-github-pages/configuring-a-custom-domain-for-your-github-pages-site&quot; target=&quot;_blank&quot;&gt;官方也有相应的文档&lt;/a&gt;，感兴趣的可以看一下，多了解一些总归是好的～。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;github-page-添加-cname&quot;&gt;GitHub Page 添加 CNAME&lt;/h2&gt;

&lt;p&gt;当域名也购买好了，解析也配置 OK 了。接下来就是在 GitHub 上面，开启自定义域名配置了。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;首先，在博客项目仓库，新建一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CNAME&lt;/code&gt;文件，&lt;strong&gt;强调，文件名就是 CNAME，且没有后缀&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;注意，如果你用类似 Hexo 生成的博客，然后 deploy 到 GitHub page 仓库的，请注意需要把这个文件也存放到生成的文件夹根目录下。具体可以搜索或者在文章下方留言。
&lt;img src=&quot;/images/blog/domain_5.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;这个文件里面就写上你自己的域名，如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bran-nie.com&lt;/code&gt;，不要 http、https 等这些协议。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;随后，你在项目仓库的 Setting 中，就能看到类似我的这样的信息。&lt;strong&gt;如果自定义域名还没有添加证书，则这里的 HTTPS 是不能勾选的&lt;/strong&gt;
&lt;img src=&quot;/images/blog/domain_4.png&quot; alt=&quot;&quot; /&gt;
说明已经 OK 了&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;修改博客配置文件&quot;&gt;修改博客配置文件&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;这一步是针对 Jekyll 用户的，其他方式的可以忽略&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这里我踩了一个坑。修改过自定义域名后，把配置&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\_config.yml&lt;/code&gt;中的 url 属性忘记修改成申请的域名了，因此导致博客网站的链接都还是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bran-nie.github.io/xxx&lt;/code&gt;，实际上国内还是访问不到。&lt;/p&gt;

&lt;p&gt;因此，切记还需要在配置文件中，修改站点 URL，这样，GitHub Page 生成的页面中的链接，站点才是正确的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bran-nie.com/xxx&lt;/code&gt; 。&lt;/p&gt;

&lt;h2 id=&quot;域名-ssl可选&quot;&gt;域名 SSL（可选&lt;/h2&gt;

&lt;p&gt;现在浏览器打开一个网页，如果是 http 协议的网站，则浏览器会提示一个不安全。现在又是大家会比较重视信息安全的时代，那么，很有必要给我们的博客加一把小锁了.&lt;/p&gt;

&lt;p&gt;我们的博客网站，几乎都是静态页面了，现在 SSL 证书也有免费的，就我所购买的腾讯云域名，在域名管理页面，就可以快速申请 SSL 证书，点击一下就可以的那种。其他服务商，也都大同小异吧～&lt;/p&gt;

&lt;p&gt;便捷方式：是在域名解析的这里，点击右侧的 SSL，根据提示操作即可。（我这里是已经申请过了，所以是绿色的 SSL 文字。
&lt;img src=&quot;/images/blog/domain_2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再或者，可以在域名控制台，找到证书相关的菜单，申请证书即可。如图：
&lt;img src=&quot;/images/blog/domain_6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;申请好证书后，是会进入审核阶段，大概半小时？审核成功后会发短信邮件等通知。&lt;/p&gt;

&lt;p&gt;当审核通过后，最后一步，是去 GitHub page 所在的仓库，在设置中勾选 HTTPS 选项，这时候，你的博客就是 https 协议访问啦～&lt;/p&gt;

&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;

&lt;p&gt;配置好博客，这是一个愉快的开端，希望我们不要忘记，为什么开通这个博客，折腾了这么久，不要忘记初心呀～&lt;/p&gt;

&lt;p&gt;一点一滴的想，一字一句的写，将自己所了解的、学到的、感悟的知识输出出来，既能有益他人的学习，更能帮助自己进一步的掌握。加油，干饭人！&lt;/p&gt;

&lt;p&gt;PS：确实，一开始写博客，是会耗时。眨眼间，两三个小时过去了，就拿这个博客来说吧，我早上从申请域名到完成迁移，也就半个小时左右，但输出这篇文章，大概花费了两个多小时。猛的一想还挺浪费时间的，其实呀，万事开头难，写多了，就好了。&lt;strong&gt;写着写着就习惯了&lt;/strong&gt; hhh&lt;/p&gt;</content><author><name>Bran.nie</name></author><category term="Blog" /><summary type="html">发现在国内，username.github.io 不能解析，了解一下是运营商的 DNS 问题。科学上网和通过本地修改 DNS 可以解决，但这只是针对个人，对其他人一点也不友好。而自定义域名可以完美的解决这个问题，再者，GitHub Page 也是很完美的支持自定义域名。 故今早打算购买一个域名用作博客，HTTPS 也是要考虑的。看了一些服务商，最后选择了腾讯云，花半个小时左右完美的解决需求。且为了培养写博客的习惯，便记录一下这个流程，也供同道中人参考使用。</summary></entry><entry><title type="html">小飞机工作原理</title><link href="https://bran-nie.com/2021/03/22/ss/" rel="alternate" type="text/html" title="小飞机工作原理" /><published>2021-03-22T00:00:00+08:00</published><updated>2021-03-22T00:00:00+08:00</updated><id>https://bran-nie.com/2021/03/22/ss</id><content type="html" xml:base="https://bran-nie.com/2021/03/22/ss/">&lt;h2 id=&quot;起因&quot;&gt;起因&lt;/h2&gt;

&lt;p&gt;通常，我们在浏览器中准备打开一个网站如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://cn.bing.com/&lt;/code&gt;，在地址栏输入完网址按下回车后，浏览器会调用网络进程，由电脑发起网络请求，随后将下载的 html、css、js 等资源给浏览器的渲染进程。&lt;/p&gt;

&lt;p&gt;但是，我们在浏览器中输入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://google.com&lt;/code&gt;。却无法打开页面，那不是因为谷歌的服务器挂了，而是，我们的请求就没走到谷歌那里去，由于 &lt;a href=&quot;https://baike.baidu.com/item/%E9%98%B2%E7%81%AB%E5%A2%99%E9%95%BF%E5%9F%8E&quot;&gt;GFW&lt;/a&gt; (即我们所说的网络墙)的存在，而被拦截了。&lt;/p&gt;

&lt;h2 id=&quot;发展&quot;&gt;发展&lt;/h2&gt;

&lt;p&gt;因此，诞生了众多工具，如 shadowsocks，ssr，V2Ray 等等。俗称梯子，梯子的一个作用，不就是爬墙吗，hahah，也就是将上面被墙拦截的请求，通过梯子爬过去。&lt;/p&gt;

&lt;p&gt;工具大概是个什么情况呢？
如图所示，再来讲解。（“优雅”的字啊 hhh
&lt;img src=&quot;/images/blog/ss.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;我们的电脑无法直接访问 Google 的服务器，通过上面其中一个工具，在有效的配置与开启后，会在自己的电脑上开启一个服务器。如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.0.0.1:1086&lt;/code&gt;，即本地服务，端口号是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1086&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;随后，工具开启的本地服务器代理(拦截)我们电脑的网络请求，一般工具会提供几个模式如：PAC、全局。PAC 模式下，网络请求会进行判断，命中 PAC 中的配置，则会通过代理服务器发送网络请求，否则是直接发送请求，而全局模式，顾名思义，则是全部的请求都会通过代理服务器。&lt;/li&gt;
  &lt;li&gt;代理服务器可以与我们的电脑，目标服务器如 Google 都能进行连接，因此，我们自己电脑访问 Google，就给它发送请求，它接收到以后再去请求 Google 的服务器，Google 的服务器把响应给它，它再给我们。这就是一个翻墙的流程了。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;小故事&quot;&gt;小故事&lt;/h2&gt;

&lt;p&gt;如果，这样描述不好理解，那么可以用个小故事类比一下。有请小明～～～&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;小明是个可怜的孩子，只能呆在一个小院子里，想要与外界沟通，只能通过门口的威猛的保安大叔。&lt;/p&gt;

  &lt;p&gt;小明想知道小米的股票多少钱，给保安说了，保安看了看规则，发现可以告诉小明，就去查询随后告诉小明。&lt;/p&gt;

  &lt;p&gt;小明想给他的好朋友小红通话，给保安说了，保安看了看规则，发现可以让他们通话，于是就让他们建立连接。&lt;/p&gt;

  &lt;p&gt;小明想看 Youtube 的上面的可爱视频，给保安说了，保安看了看规则，不行！因此小明被拒绝了。&lt;/p&gt;

  &lt;p&gt;小明苦啊，怎么办呢，怎么办呢，这时候，小明突然想到，他可以和小红有联系，而小红呢，可以看 YouTube，咦，那不就可以让小红把 YouTube 的视频发给我么。&lt;/p&gt;

  &lt;p&gt;于是，小明给小红说了一下，小红同意了。于是小明做了个小工具让他和小红使用。而保安呢，小明只是给他说，我要和小红打电话哈，你同意下。保安看了看规则，可以。&lt;/p&gt;

  &lt;p&gt;这个工具呢，小明用它的时候，就会给保安说，要和小红打电话，保安就会同意，而小红那边的工具呢，接收到信息后，发现是小明的工具发过来的，就明白了，小明是要看 YouTube，于是小红就会按照小明的请求，去找 YouTube 的资源，然后发给小明。&lt;/p&gt;

  &lt;p&gt;在这个过程中，小明假装是和小红打电话，让保安没有拒绝他的请求，实际上是通过工具让小红给他看可爱的 YouTube 视频。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在这个故事里，小明就是我们的电脑和我们，小红就是代理服务器，工具呢，就是我们所用的梯子，ss、ssr 等等那些，什么，这些梯子你都没听过？那可不好讲了。。&lt;/p&gt;

&lt;h2 id=&quot;总结一下&quot;&gt;总结一下&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;由工具开启本地服务器&lt;/li&gt;
  &lt;li&gt;本地服务器与代理服务器通信，代理服务器与目标服务器通信&lt;/li&gt;
  &lt;li&gt;访问被墙的目标服务器时，电脑是通过 &lt;strong&gt;本地服务器 &amp;lt;—&amp;gt; 代理服务器 &amp;lt;—&amp;gt; 目标服务器&lt;/strong&gt; 这样的请求流程，得到想要的资源的。&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Bran.nie</name></author><category term="Blog" /><summary type="html">起因</summary></entry><entry><title type="html">抛开 Scroll 事件，这个 API，可以轻松实现吸顶、触底、懒加载</title><link href="https://bran-nie.com/2021/03/18/IntersectionObserver/" rel="alternate" type="text/html" title="抛开 Scroll 事件，这个 API，可以轻松实现吸顶、触底、懒加载" /><published>2021-03-18T00:00:00+08:00</published><updated>2021-03-18T00:00:00+08:00</updated><id>https://bran-nie.com/2021/03/18/IntersectionObserver</id><content type="html" xml:base="https://bran-nie.com/2021/03/18/IntersectionObserver/">&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Intersection Observer API&lt;/code&gt; 提供了一种异步检测目标元素与祖先元素或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;viewport&lt;/code&gt; 相交情况变化的方法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;前景介绍&quot;&gt;前景介绍&lt;/h2&gt;

&lt;p&gt;过去，要检测一个元素是否在视图中或者两个元素是否相交并不容易，我们可以通过调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Element.getBoundingClientRect()&lt;/code&gt;方法获取元素的边界信息，再进一步判断。然而，这个事件的调用和监听都是在主线程上运行，因此频繁触发、调用可能会造成性能问题。并且这种方式也较为怪异和不雅。&lt;/p&gt;

&lt;p&gt;现在，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IntersectionObserver API&lt;/code&gt;则给我们提供了一个优雅高效的方式。它会注册一个回调函数，每当目标元素达到我们设定的触发条件时，该回调函数就会被触发执行。这样，我们网站的主线程就不需要再为了监听元素而辛苦劳作，而浏览器会自行优化这个元素相交管理。这也是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Observer&lt;/code&gt;的意义所在。&lt;/p&gt;

&lt;h2 id=&quot;场景应用&quot;&gt;场景应用&lt;/h2&gt;

&lt;p&gt;日常的需求中，可能会有下面几个场景&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;图片懒加载 — 当图片滚动到可视区域时才进行加载&lt;/li&gt;
  &lt;li&gt;内容无限滚动 — 也就是用户滚动页面，将接近底部的时候，加载新的数据，而无需用户操作翻页&lt;/li&gt;
  &lt;li&gt;检测模块的曝光情况 — 如广告、新增的功能模块，想统计它的出现次数、曝光情况&lt;/li&gt;
  &lt;li&gt;在用户看见某个区域时执行任务或者播放动画&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;简单示例&quot;&gt;简单示例&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;图片懒加载&quot;&gt;图片懒加载&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://bran-nie.com/Note/js/API/IntersectionObserver/?demo=imglazyload&quot;&gt;Demo 展示&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/img_lazyload.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/blog/img_lazyload_2.png&quot; alt=&quot;&quot; /&gt;
html 的结构如下，img 标签，自定义 data 放置图片的 src，设置 lazyload 类，用来监听。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;images-container&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-if=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;showImageLazyDemo&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;水平滚动，懒加载&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;images horizontal&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;i in 8&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;i&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lazyload&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:data-src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;xxxx&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;向下滚动，懒加载&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;images vertical&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;i in 8&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;i&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lazyload&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:data-src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;xxxx&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;images&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;img.lazyload&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imgObserver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IntersectionObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;observer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 如果图片已经在视图中 root&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isIntersecting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// 图片已经开始加载，所以可以停止监听这个 target 了&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;observer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unobserve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;rootMargin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;0 0 200px 0&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 这里是调整视图的边距，底部是200px，意味着将视图向下扩张了200px。&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imgObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;这种方式，不仅很方便，并且还能支持横向的滚动懒加载。&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;内容滚动加载--播放动画&quot;&gt;内容滚动加载 &amp;amp;&amp;amp; 播放动画&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://bran-nie.com/Note/js/API/IntersectionObserver/?demo=animation&quot;&gt;Demo 展示&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;animation&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-if=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;!showImageLazyDemo&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;`item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;i in blockLen&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;i&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;block&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;reference&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 内容滚动加载&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 防止重复请求数据。&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadObserver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IntersectionObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isIntersecting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 已经发出请求再次触发，则直接 return&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;滚动到了底部，开始请求数据，比如发送异步请求&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;请求到数据&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;clearTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;loadObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.reference&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// item 的交叉监听事件绑定&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`.animation div.item`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;itemObserver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IntersectionObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;observer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 如果图片已经在视图中 root&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isIntersecting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// observer.unobserve(target);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;itemObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;api-语法简介&quot;&gt;API 语法简介&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;这个 API 兼容性上，不支持 IE 浏览器，其他浏览器的版本，现在常见的都还可以。&lt;/p&gt;

  &lt;p&gt;官方提供的 &lt;a href=&quot;https://github.com/w3c/IntersectionObserver/blob/main/polyfill/intersection-observer.js&quot; target=&quot;_blank&quot;&gt;polyfill&lt;/a&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const Observer = new IntersectionObserver(callback[, options])&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;callback&quot;&gt;callback&lt;/h3&gt;

    &lt;p&gt;当元素可见比例超过指定阈值后，会调用一个回调函数，此回调函数接受两个参数：&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;entries&lt;/code&gt;: entry[]&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;是当前&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;已监听&lt;/code&gt;并且&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;触发了&lt;/code&gt; 设定的触发条件的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;目标集合&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;observer&lt;/code&gt;: Observer{}&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;是构造函数返回的实例。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;options-可选&quot;&gt;options [可选&lt;/h3&gt;

    &lt;p&gt;一个用来配置 observer 实例的对象。有以下几个配置项，未指定配置时，分别有默认值。&lt;/p&gt;

    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt;: null&lt;/td&gt;
          &lt;td&gt;Element&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

    &lt;ul&gt;
      &lt;li&gt;监听元素的祖先元素，其边界将被看作是视口，也就是将这个元素的所在的区域当作监听元素的可视区域。监听元素不在视口的部分，会被视为不可见。默认是 null，即根节点视图窗口。&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rootMargin&lt;/code&gt;: String&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;一个在计算交叉值时，添加给&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt;边界盒的一组偏移量。语法和 css 中的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;margin&lt;/code&gt;大致等同。默认值是：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;0px 0px 0px 0px&quot;&lt;/code&gt;。&lt;/li&gt;
    &lt;/ul&gt;

    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;threshold&lt;/code&gt;: Number&lt;/td&gt;
          &lt;td&gt;Number[]&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

    &lt;ul&gt;
      &lt;li&gt;规定了一个监听元素与&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt;边界盒交叉区域的比例值。这个也是决定触发 callback 的条件。&lt;/li&gt;
      &lt;li&gt;取值可以是一个 Number(0.0 - 1.0)或者一组 0.0 到 1.0 之间的数组。&lt;/li&gt;
      &lt;li&gt;若数值是 0.0，则意味着监听元素与&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt;有 1 像素的交叉，此元素就会被视为可见，就会触发 callback。&lt;/li&gt;
      &lt;li&gt;若数值是 1.0，则意味着监听元素完全与&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt;交叉，即监听元素完全出现在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt;中，此元素才被视为可见，才会触发 callback。&lt;/li&gt;
      &lt;li&gt;同理，若数值是 0.5，则监听元素有一半与&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt;交叉，此元素会被视为可见，触发 callback。&lt;/li&gt;
      &lt;li&gt;当取值是数组时，当监听元素满足数组内的任一情况时，都会触发 callback。
        &lt;ul&gt;
          &lt;li&gt;如：[0.0, 0.2, 0.4, 0.6. 0.8, 1.0]，监听元素在刚与&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt;交叉，20%、40%、60%、80%、100%交叉的时候，都会触发 callback。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;observer-&quot;&gt;Observer: {}&lt;/h3&gt;

    &lt;p&gt;一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IntersectionObserver&lt;/code&gt;实例，有以下方法。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disconnect()&lt;/code&gt; 实例停止监听工作，即等同销毁这个实例。&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;observe()&lt;/code&gt; 实例监听一个目标元素。&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;takeRecords()&lt;/code&gt; 返回所有观察目标的对象数组。&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unobserve()&lt;/code&gt; 停止监听特定的目标元素，即等同销毁与这个目标元素的关联。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;写在最后&quot;&gt;写在最后&lt;/h2&gt;

&lt;p&gt;我现在还不擅长写这样的文章，另外还比较耗时，当然，在这个过程中，我对这个接口倒是熟悉了不少。&lt;/p&gt;

&lt;p&gt;也在纠结语法这个怎么处理，照着 MDN 的搬运吧，感觉不够意思，自己去写，又觉得不如 MDN 上面说得清晰。只好选择先把示例放上面，随后再给 API 语法了。。&lt;/p&gt;

&lt;p&gt;在写文章的时候，也去查阅了大佬们的文章，看到了张鑫旭之前写的有关这个接口的文章。在&lt;a href=&quot;https://www.zhangxinxu.com/wordpress/2020/12/js-intersectionobserver-nav/&quot;&gt;他的文章的结尾处&lt;/a&gt;看到一段话，感触颇深。&lt;/p&gt;

&lt;p&gt;确实，不间断地折腾，它在当下看，似乎没什么收益，但长远来看，折腾是以一种更加无形的方式反馈给了你！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/toos_worth.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Bran.nie</name></author><category term="Javascript" /><summary type="html">Intersection Observer API 提供了一种异步检测目标元素与祖先元素或 viewport 相交情况变化的方法。</summary></entry><entry><title type="html">PicGo 一款优秀的图床</title><link href="https://bran-nie.com/2021/03/15/PicGo/" rel="alternate" type="text/html" title="PicGo 一款优秀的图床" /><published>2021-03-15T00:00:00+08:00</published><updated>2021-03-15T00:00:00+08:00</updated><id>https://bran-nie.com/2021/03/15/PicGo</id><content type="html" xml:base="https://bran-nie.com/2021/03/15/PicGo/">&lt;h2 id=&quot;picgo&quot;&gt;PicGo&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/picgo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Bran.nie</name></author><category term="Tutorials" /><summary type="html">PicGo</summary></entry><entry><title type="html">CSS 滚动条样式</title><link href="https://bran-nie.com/2021/01/14/scrollbar/" rel="alternate" type="text/html" title="CSS 滚动条样式" /><published>2021-01-14T00:00:00+08:00</published><updated>2021-01-14T00:00:00+08:00</updated><id>https://bran-nie.com/2021/01/14/scrollbar</id><content type="html" xml:base="https://bran-nie.com/2021/01/14/scrollbar/">&lt;blockquote&gt;
  &lt;p&gt;该特性还是草案，是非标准的。请明确知道它&lt;strong&gt;只支持 Webkit 内核的浏览器。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;demo-预览-或-在-codepen-中打开&quot;&gt;&lt;a href=&quot;https://bran-nie.com/Note/css/scrollbar/&quot;&gt;Demo 预览&lt;/a&gt; 或 &lt;a href=&quot;https://codepen.io/bran-nie/pen/jOMaOqp&quot;&gt;在 Codepen 中打开&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&quot;css-属性自定义滚动条样式&quot;&gt;CSS 属性：自定义滚动条样式&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;::-webkit-scrollbar&lt;/code&gt; 整个滚动条&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;::-webkit-scrollbar-button&lt;/code&gt; 滚动条上的按钮（上下或左右箭头）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;::-webkit-scrollbar-track&lt;/code&gt; 滚动条轨道&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;::-webkit-scrollbar-track-piece&lt;/code&gt; 滚动条没有滑块的轨道部分&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;::-webkit-scrollbar-thumb&lt;/code&gt; 滚动条上的滚动滑块&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;::-webkit-scrollbar-corner&lt;/code&gt; 垂直和水平滚动条交汇的部分&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;::-webkit-resizer&lt;/code&gt; 上面交汇部分中的部分样式。（可拖动的按钮）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/css-scrollbar.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;css-属性控制浏览器过渡滚动&quot;&gt;CSS 属性：控制浏览器过渡滚动&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/CSS/overscroll-behavior&quot;&gt;overscroll-behavior&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auto&lt;/code&gt; 默认效果。&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;contain&lt;/code&gt; 默认的滚动边界行为不变（“触底”效果或者刷新），但是临近的滚动区域不会被滚动链影响到，比如对话框后方的页面不会滚动。&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;none&lt;/code&gt; 临近滚动区域不受到滚动链影响，而且默认的滚动到边界的表现也被阻止。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;css-属性控制滚动条的绘制位置&quot;&gt;CSS 属性：控制滚动条的绘制位置&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;overflow: overlay&lt;/code&gt; 滚动条将绘制在内容之上。
    &lt;ul&gt;
      &lt;li&gt;PS：这个属性 仅在基于 WebKit（例如，Safari）和基于 Blink 的（例如，Chrome 或 Opera）浏览器中受支持。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;应用&quot;&gt;应用：&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;还原 UI 设计的滚动条样式&lt;/li&gt;
  &lt;li&gt;修改滚动条跳动导致页面错位的 bug&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Bran.nie</name></author><category term="Css" /><summary type="html">该特性还是草案，是非标准的。请明确知道它只支持 Webkit 内核的浏览器。</summary></entry><entry><title type="html">使用 css自定义属性（css变量），配合 js 更新 css，实现星星打分~</title><link href="https://bran-nie.com/2020/12/18/css-variable/" rel="alternate" type="text/html" title="使用 css自定义属性（css变量），配合 js 更新 css，实现星星打分~" /><published>2020-12-18T00:00:00+08:00</published><updated>2020-12-18T00:00:00+08:00</updated><id>https://bran-nie.com/2020/12/18/css%20variable</id><content type="html" xml:base="https://bran-nie.com/2020/12/18/css-variable/">&lt;p&gt;&lt;img src=&quot;/images/blog/css-variable.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;demo-预览-或-在-codepen-中打开&quot;&gt;&lt;a href=&quot;https://bran-nie.com/Note/css/variable/&quot;&gt;Demo 预览&lt;/a&gt; 或 &lt;a href=&quot;https://codepen.io/bran-nie/pen/NWRjOXO&quot;&gt;在 Codepen 中打开&lt;/a&gt;&lt;/h3&gt;

&lt;h2 id=&quot;所需知识点&quot;&gt;所需知识点&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties&quot;&gt;css 自定义属性，即变量&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/CSS/var()&quot;&gt;var()函数&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/CSS/calc()&quot;&gt;calc()函数&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;background 使用&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;需求解析编码思路&quot;&gt;需求解析&amp;amp;编码思路&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;鼠标在其上移动，评分随之变更&lt;/li&gt;
  &lt;li&gt;点击评分后，固定评分&lt;/li&gt;
  &lt;li&gt;鼠标离开后，回显上次评分&lt;/li&gt;
  &lt;li&gt;采用背景图方案，repeat 素材&lt;/li&gt;
  &lt;li&gt;使用 calc 计算宽度，展示评分的变化&lt;/li&gt;
  &lt;li&gt;根据鼠标在评分 DOM 元素上的 x 轴偏移量，计算评分&lt;/li&gt;
  &lt;li&gt;绑定事件，mousemove，mouseleave，及 click&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;代码实现&quot;&gt;代码实现&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;HTML&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;starBox&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;star-box&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;CSS&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/* 将背景属性公用的部分提出 */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.star-box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.star-box&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::before&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;repeat-x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;26px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.star-box&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/* 盒子总宽度，与星星个数有关，单个星星素材宽高26px */&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--starNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;26px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;26px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nl&quot;&gt;background-image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url('/* 未评分的星星svg素材 */')&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.star-box&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::before&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/* 点亮的星星个数，计算宽度 */&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--activeStar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;26px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nl&quot;&gt;background-image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url('/* 评分的星星svg素材 */')&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AllScore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 评分总个数&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 评分&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;starBox&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;starBox&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;starBox&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTMLDivElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 待实现功能：&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 1. 鼠标在其上移动，评分变更&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 2. 点击评分后，固定评分&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 3. 鼠标离开后，回显上次评分&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 处理鼠标移动事件，改变评分。&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleMove&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 通过x轴距离起点待偏移量和x轴总长确定评分&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;offsetX&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// console.log({ offsetX });&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hoverStar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getScore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;offsetX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;starBox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;--activeStar&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hoverStar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 鼠标离开后，恢复至上次评分&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleLeave&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;starBox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;--activeStar&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 点击评分后，记录评分&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;offsetX&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getScore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;offsetX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;starBox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;--activeStar&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 获取评分。&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getScore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;offsetX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;offsetX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;offsetX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;offsetX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;offsetX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;offsetX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;starBox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;mousemove&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleMove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;starBox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;mouseleave&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleLeave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;starBox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;扩展和探索发现&quot;&gt;扩展和探索发现&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Q：PC 端用 mousemove 和 mouseleave 事件，那移动端呢？&lt;/li&gt;
  &lt;li&gt;A：使用 touchmove 和 touchend。&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/Touch_events&quot;&gt;触摸事件&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;详细代码见&lt;a href=&quot;./index.html&quot;&gt;index.html&lt;/a&gt;文件&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Q：移动端和 PC 会有什么不同？&lt;/li&gt;
  &lt;li&gt;A：
    &lt;ul&gt;
      &lt;li&gt;首先是交互不同，PC 端是鼠标移动，移动端是手指触摸滑动；对于确认评分，PC 端是常见是点击事件，移动端则是手指抬起，即 touchend 事件结束。&lt;/li&gt;
      &lt;li&gt;left 取值不同，PC 端是取相对偏移量，移动端是获取触摸点端位置减去 DOM 元素的偏移量。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Q：还有别的巧妙的方式吗？&lt;/li&gt;
  &lt;li&gt;A：利用 input[type=”range”]也可以实现。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;感谢sunseekers的知识分享&quot;&gt;感谢&lt;a href=&quot;https://github.com/sunseekers&quot;&gt;sunseekers&lt;/a&gt;的知识分享。&lt;/h2&gt;</content><author><name>Bran.nie</name></author><category term="Css" /><summary type="html"></summary></entry><entry><title type="html">CSS counter 计数</title><link href="https://bran-nie.com/2020/12/17/css-counter/" rel="alternate" type="text/html" title="CSS counter 计数" /><published>2020-12-17T00:00:00+08:00</published><updated>2020-12-17T00:00:00+08:00</updated><id>https://bran-nie.com/2020/12/17/css%20counter</id><content type="html" xml:base="https://bran-nie.com/2020/12/17/css-counter/">&lt;blockquote&gt;
  &lt;p&gt;本质上 CSS 计数器是由 CSS 维护的变量，这些变量可能根据 CSS 规则增加以跟踪使用次数。这允许你根据文档位置来调整内容表现。&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Counters&quot;&gt;CSS 计数器&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;计数器&quot;&gt;计数器&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;创建一个 counters：&lt;/strong&gt; 在父元素或更高层中声明一个变量。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;counter-reset: ${counter-name} ${value}&lt;/code&gt;， value 必须是 integer 类型，否则为默认值 0.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;控制 counters 的值变化：&lt;/strong&gt; 在需要计数的元素中，使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cunter-increment&lt;/code&gt;或者&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;counter-set&lt;/code&gt;来控制 counters 的变化。
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;counter-name&amp;gt;?&amp;lt;integer&amp;gt;&lt;/code&gt;，integer 默认值，使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;counter-increment: &lt;/code&gt;时是 1， 使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;counter-set&lt;/code&gt;时是 0。&lt;/li&gt;
      &lt;li&gt;如果元素上当前没有给定名称的计数器，则该元素会在设置或递增其值之前使用起始值 0 实例化给定名称的新计数器。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;使用 counters&lt;/strong&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;counter()&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;counters()&lt;/code&gt;函数是返回 counter 的方式。
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;counter(name, counter-type?)&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;counters(name, string, counter-type?)&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;counter-type 默认是十进制 （decimal）&lt;/li&gt;
      &lt;li&gt;尽管这两个函数可以在大多数 css 属性里使用，但推荐在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;content&lt;/code&gt;里使用&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;for-example&quot;&gt;For example&lt;/h3&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;list-style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;counter-reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::before&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;counter-increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'. '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;counter，设置的变量是 hello 初始值是3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;在li的before中，每次递增的是3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;在li的before伪元素content属性中，调用 counter 函数，&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;因为调用过后，变量hello的值就会改变，所以第一个li的 编号就是初始值+递增值。即6&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;demo-预览&quot;&gt;&lt;a href=&quot;https://bran-nie.com/Note/css/counters/&quot;&gt;Demo 预览&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;应用&quot;&gt;应用&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;目录&lt;/li&gt;
  &lt;li&gt;计数&lt;/li&gt;
  &lt;li&gt;循环赋值&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Bran.nie</name></author><category term="Css" /><summary type="html">本质上 CSS 计数器是由 CSS 维护的变量，这些变量可能根据 CSS 规则增加以跟踪使用次数。这允许你根据文档位置来调整内容表现。CSS 计数器</summary></entry><entry><title type="html">经济萧条下的消费</title><link href="https://bran-nie.com/2020/04/15/think/" rel="alternate" type="text/html" title="经济萧条下的消费" /><published>2020-04-15T00:00:00+08:00</published><updated>2020-04-15T00:00:00+08:00</updated><id>https://bran-nie.com/2020/04/15/think</id><content type="html" xml:base="https://bran-nie.com/2020/04/15/think/">&lt;p&gt;&lt;img src=&quot;/images/blog/door.jpg&quot; alt=&quot;?&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2020 可算是魔幻开局，新型肺炎、国内外火灾、经济下滑…&lt;/p&gt;

&lt;p&gt;昨天有人发给我一张图片，是一公司空了，搞不好是受疫情影响，公司就。。。&lt;/p&gt;

&lt;p&gt;其实这蛮常见的，而我所思的，是朋友说，他们公司租下来这个办公室了，因为看门上贴的是他们公司的公告。&lt;/p&gt;

&lt;p&gt;2020 的魔幻开局，让很多人都意识到，接下来的日子不好过了，钱只有在手里才有保障，开始了屯钱(即减少开支 omz)，并希望自己屯钱的速度大于贬值的速度。&lt;/p&gt;

&lt;p&gt;而资本家怎么操作的？ 他们利用自己手里的强大的现金流，低价购置实体产业，然后等经济回温了，身价又是一波上涨。&lt;/p&gt;

&lt;p&gt;而普通人呢，还在思考生存的问题。&lt;/p&gt;

&lt;p&gt;哦，这多彩斑斓的世界，竟如此美丽。&lt;/p&gt;</content><author><name>Bran.nie</name></author><category term="Life" /><summary type="html"></summary></entry><entry><title type="html">关于JS中, 对引用类型console出现偏差的问题分析</title><link href="https://bran-nie.com/2020/04/15/console/" rel="alternate" type="text/html" title="关于JS中, 对引用类型console出现偏差的问题分析" /><published>2020-04-15T00:00:00+08:00</published><updated>2020-04-15T00:00:00+08:00</updated><id>https://bran-nie.com/2020/04/15/console</id><content type="html" xml:base="https://bran-nie.com/2020/04/15/console/">&lt;blockquote&gt;
  &lt;p&gt;key 引用类型 内存 同步执行 console.log&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/console.jpg&quot; alt=&quot;console.log&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Q :&lt;/p&gt;

&lt;p&gt;console.log 打印的时候，a 里面是有一个元素，但打印后展开，a 有两个值&lt;/p&gt;

&lt;p&gt;A :&lt;/p&gt;

&lt;p&gt;首先，我们要明白，数组是一个引用类型，即，变量名只是指向内存地址的指针&lt;/p&gt;

&lt;p&gt;其次，在上图中，我们是先声明一个 变量 a，指向一个数组[1]，随后进行打印，再接着是对数组进行 push 操作。OK，潜意识里，我们认为 js 是单进程且顺序执行，并且代码块中都是同步的，所以我们会觉得打印出来是 push 操作之前的数组，但实际上，显示 Array 的长度是 1，当我们查看元素, 反而是 push 后的，出现了偏差。&lt;/p&gt;

&lt;p&gt;这是为什么呢？ 让我们思考加探索一下。&lt;/p&gt;

&lt;p&gt;Music，Let’s go&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;上面我们指出，数组是引用类型，变量是个指针指向内存地址，数组的 push 操作，是在一段连续的内存上增加一个值&lt;/li&gt;
  &lt;li&gt;由于都是同步语句，那么就顺序执行。在 console 的时候，显示数组长度 1&lt;/li&gt;
  &lt;li&gt;console 在打印的时候，确实是 Array(1), 紧接着该变量指针 数组执行了 push 操作, 这时候代码块已经执行完.&lt;/li&gt;
  &lt;li&gt;但在随后查看的时候元素却是两个, 显示出了偏差 !&lt;/li&gt;
  &lt;li&gt;这里为什么出现了显示不一致的情况?&lt;/li&gt;
  &lt;li&gt;原来, console 打印引用类型的操作, 是先打印引用类型的快照, 在展开对象的时候, 会再次去读取变量指针的值, 而此时, 代码块已经执行完了, 即 push 操作已经生效, 变量指针指向的值已经更改, 所以读取的是 push 操作后的值. 所以出现了 Array(1), [0: 1, 1: 2] 的情况。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;事实是如此吗, 我们简单验证一下&lt;/p&gt;

&lt;p&gt;console.log 的时候, 顺便打印 key, ( 因为数组也是对象, 所以可以 keys)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/console1.jpg&quot; alt=&quot;console.log&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用断点验证&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/console2.jpg&quot; alt=&quot;console.log&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在使用断点后, 第一次打印的数据, 展开后是 push 操作前的值, 代码块执行完后, 再次展开还是一个元素.&lt;/p&gt;

&lt;p&gt;上面两种方式, 说明了 console 操作对于引用类型, 是有两次读取的. 第二次来自首次展开对象.&lt;/p&gt;</content><author><name>Bran.nie</name></author><category term="Javascript" /><summary type="html">key 引用类型 内存 同步执行 console.log</summary></entry><entry><title type="html">Git Pull-Request 一种名为PR的项目管理方式</title><link href="https://bran-nie.com/2020/02/28/github-PR/" rel="alternate" type="text/html" title="Git Pull-Request 一种名为PR的项目管理方式" /><published>2020-02-28T00:00:00+08:00</published><updated>2020-02-28T00:00:00+08:00</updated><id>https://bran-nie.com/2020/02/28/github-PR</id><content type="html" xml:base="https://bran-nie.com/2020/02/28/github-PR/">&lt;h2 id=&quot;hey-出现&quot;&gt;hey 出现&lt;/h2&gt;

&lt;p&gt;广为人知的&lt;a href=&quot;https://github.com/&quot;&gt;同性交友网站&lt;/a&gt;的一大特色就是 Pull-Request 功能, 简称 PR. 这也是开源的重要功能之一。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/github/github-pr1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;pull-request-是什么&quot;&gt;Pull-Request 是什么？&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Github 官方文档的定义是: “Pull Request 是一种通知机制。你修改了他人的代码，将你的修改通知原来的作者，希望他合并你的修改，这就是 Pull Request。”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pull-Request 可以理解为是一个项目的合作方式, 是将多人的代码进行合并, 并入特定分支的一种流程.&lt;/p&gt;

&lt;p&gt;当多人合作时, 就会涉及到代码的提交与合并, 而 PR 方式, 在合并的过程中, 管理员(项目拥有者 or 权限者)可以 review, 讨论, 修改代码, 在审核通过后,可以 Merge 到指定分支.
&lt;img src=&quot;/images/blog/github/github-pr2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;pull-request-的流程&quot;&gt;Pull-Request 的流程？&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;以下使用 Github 作为范例, 其他 git 平台都是类似的, 如 gitlab, gitee&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1.打开项目主页, Fork 项目到自己账户.
&lt;img src=&quot;/images/blog/github/github-pr3.1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.在个人 repos 中打开 Fork 的项目, 并克隆到本地.
&lt;img src=&quot;/images/blog/github/github-pr3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.打开本地项目, 创建与 Fork 项目仓库的联系,&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# learn-PR 是自定义的远端仓库名字. 较为流行的命名是 Fork 仓库的名字&lt;/span&gt;
git remote add learn-PR git://github.com/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; User&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4.如果发现本地的代码与 Fork 项目不一致, 也可以 fetch 到本地后, 再 merge.
&lt;img src=&quot;/images/blog/github/github-pr4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5.在本地编辑代码, 提交到自己远端仓库.
&lt;img src=&quot;/images/blog/github/github-pr5.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;6.在 web 界面, 创建 Pull-Request
&lt;img src=&quot;/images/blog/github/github-pr6.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;7.选择仓库及分支, 确认 PR 信息无误后, 可以点击 Create, 其后是填写该 PR 的描述, (尽量简短清晰
&lt;img src=&quot;/images/blog/github/github-pr7.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;8.等待管理员审核 PR&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果只是简单的文案修改, 在 web 界面就可以查看 管理, 如果代码变更, 则还是需要用 IDE 打开查看, 见下一个.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/github/github-pr8.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;9.管理员验证 PR (命令行&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;git am&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Github 对每个 PR 会自动生成一个 patch 文件, 下载该文件,合并进本地代码,就可以在本地查看效果了&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 下面命令要在本地项目的主页.&lt;/span&gt;
curl &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; http://github.com/nieMick/study/pull/4.patch | git am
&lt;span class=&quot;c&quot;&gt;# nieMick/study 是 Fork 仓库, pull/4.patch 是 该仓库收到的第 4 个 PR. git am 命令是合并到当前分支&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;为 PR 创建远程分支&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 类似本地创建 Fork 项目的流程 不过 仓库是提交 PR 者的仓库&lt;/span&gt;

git remote add bran git://github.com/bran-nie/study.git
git fetch bran
git merge bran/master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;pull-request-与-gitflow&quot;&gt;Pull-Request 与 Gitflow&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Gitflow 方式使用不同的分支进行协同工作, 它为不同的分支分配了一个明确的角色, 并确定了分支之间如何联系.简单的讲:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;master 分支: 用于存储生产环境代码,&lt;/li&gt;
  &lt;li&gt;develop 分支: 开发时使用的分支&lt;/li&gt;
  &lt;li&gt;feat/xxx 分支: 个人开发时, 使用的分支, review 过后可以合并到 develop 上.&lt;/li&gt;
  &lt;li&gt;release 分支: 提测时从 developcheckout 的分支, 修改 bug 也是在这里. 测试通过后, merge 到 master 和 develop&lt;/li&gt;
  &lt;li&gt;hotfix 分支: master 出现紧急问题时, 从 master 上 checkout, 修复后要 merge 到 master 和 develop or release&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/github/github-pr9.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;两者相比, 个人感觉 PR(Github flow), 是 Git flow 的简化版, 我们只维护 master 分支, 开发新分支后, 向 master 分支提一个 PR&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在持续部署上, PR 会更合适, 稍微长期一点如同时会存在 master 和新代码, git flow 也是不错的选择&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;待后续使用补充…&lt;/p&gt;</content><author><name>Bran.nie</name></author><category term="Tutorials" /><summary type="html">hey 出现</summary></entry></feed>